import "../imports/json"
import "../imports/markdown"

make object config, documentation_config = {}
make string output_folder = ""

define void compile_documentation() {
    // fetch configuration
    make file = read("docato-config.json")
    set config = json_parse(file)

    do validate_config("config", ["output", "page_header", "header", "footer", "index_footer", "documentation_config"], config)
    
    set output_folder = config->output
    set documentation_config = config->documentation_config

    do validate_config("documentation_config", ["title", "index_page", "favicon", "styles", "scripts", "pages", "variables", "output_name"], documentation_config)    

    // remove output folder
    do deleteDirectory(output_folder, true) catch sayln("Could not delete old output folder")
    // recreate empty output folder
    do createDirectory(output_folder)

    // create output folder
    set output_folder = `{output_folder}/{documentation_config->output_name}`
    do sayln(`Creating output folder: {output_folder}`)
    do createDirectory(output_folder)

    // compile index page
    do compilePage(documentation_config->index_page, `{output_folder}/index.html`, "index", -1)
}

define void validate_config(string config_name, array fields, object config) {
    if config->(field) == null then throw(`Field not found on {config_name}: {field}`) for field in fields
}

define void compilePage(string page_source, string page_output, string name, int page_index) {
    if exists(page_source) then {
        const contents = convertDocatoVariables(read(page_source), name, page_index) |> markdown_to_html
        const page_header = convertDocatoVariables(read(config->page_header), name, page_index) |> markdown_to_html
        const header = convertDocatoVariables(read(config->header), name, page_index)
        const footer = convertDocatoVariables(read(config->footer), name, page_index) |> markdown_to_html
        
        do sayln(`Compiling page: {page_source} -> {page_output}`)

        const output = `<!DOCTYPE html><html><head>{header}</head><body>{page_header}<main>{contents}</main>{footer}</body></html>`

        do write(page_output, output)
    } else {
        do throw(`Page source not found: {page_source}`)
    }
}


define string convertDocatoVariables(string content, string page, int page_index) {
    set content = stringReplace(content, "{$main_title}", documentation_config->title)
    set content = stringReplace(content, "{$title}", page)
    set page_index++ // 1-based index

    if page_index == 0 then {
        set content = stringReplace(content, "{$previous_page}", "")
    } else if page_index == 1 then {
        set content = stringReplace(content, "{$previous_page}", documentation_config->index_page)
    } else {
        set content = stringReplace(content, "{$previous_page}", documentation_config->pages#(page_index - 1)->title)
    }

    if page_index == (int)documentation_config->pages then {
        set content = stringReplace(content, "{$next_page}", "")
    } else {
        set content = stringReplace(content, "{$next_page}", documentation_config->pages#(page_index)->title)
    }

    return content
}